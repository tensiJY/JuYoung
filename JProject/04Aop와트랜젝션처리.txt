4. Aop와 트랜젝션 처리
01. spring의 AOP와 트랜젝션 관리

스프링의 중요한 특징 : DI 와 AOP

1.1 AOP라는 의미
AOP의 'aspect' - 공통죈 작업 정도의 의미

1.1.1 AOP와 관련된 용어
어떻게 기존의 코드를 수정하지 않고 코드의 앞이나 뒤에서 필요한 기능이 동작하도록 장성할 수 있을까?
이에 대한 구현 방식은 소위 프록시 패턴이라는 방식을 통해서 구현.


Aspect : 공통 관심사에 대한 추상적인 명칭, 예를 들어 로깅이나 보안, 트랜젹션과 같은 기능 자체에 대한 용어
Advice : 실제로 기능을 구현한 객체
Join points : 공통 관심사를 적용할 수 있는 대상, Spring AOP에서는 각 객체의 메소드가 이에 해당
Pointcuts : 여러 메소드 중 실제 Advice가 적용될 대상 메소드
target : 대상 메소드를 가지는 객체
Proxy : Advice가 적용되었을 때 만들어지는 객체
Introduction : target 에는 없는 새로운 메소드나 인스턴스 변수를 추가하는 기능
Weaving : Advice와 target이 결합되어서 프록시 객체를 만드는 과정

Advice : 실제 적용시키고 싶은 코드 자체, 개발자가 만드는 것은 Aspect가 아닌 클래스를 제작하고
@Advice를 적용하는 것임. 예를 들어 로그 출력 기능, 파라미터 체크 기능 자체는 Aspect라는 용어로 부르지만, 실제 구현시에는
Advice를 제작한다고 표현

target : 실제 비즈니스 로직을 수행하는 객체를 의미, 용어 그대로 Aspect를 적용해야 하는 대상 객체를 의미함.

Join points : 작성된 Advice가 활약할 수 있는 위치를 의미, 예를 들어 BoardService에서 등록, 수정, 삭제만을 골라서 
Advice를 적용할 수 있는데, 이때 BoardService의 모든 메소드는 JoinPoint가 됨

PointCuts : 여러 Join points 중에서 Advice를 적용할 대상을 선택하는 정보. 이를 통해서 특정 메소도는 Advice가 적용된 형태로
동작함.

Proxy는 일반적인 의미에서는 직접 호충하는 방식이 아니라, 간접적인 호출을 의미
즉 원래 객체인 target을 호출할 때 외부에서 직접 target을 호출하는 것이 아니라, Advice가 적용된 Proxy객체를 통해서 호출한다는 것을
의미

Advice의 종류
Before Advice target의 메소드 호출 전에 적용
after returning target의 메소드 호출 이후에 적용
After throwing target의 예외 발생 후 적용
after target의 메소드 호출 후 예외의 발생에 관계없이 적용
around target의 메소드 호출 이전과 이후 모두 적용(가장 광범위하게 사용됨)

pom.xml 파일의 수정 -> dependency 추가 -> root-context.xml 설정


	<!-- aspectj-version 업-->
	<properties>
		<java-version>1.6</java-version>
		<org.springframework-version>5.0.0.RELEASE</org.springframework-version>
		<org.aspectj-version>1.8.9</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
		<!-- AOP를 활용하려면 AOP관련 라이브러리, 트랜잭션 처리 spring-tx-->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aop</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
				
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-tx -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-tx</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjtools -->
		<!-- aspectj언어의 문법을 이용하기 때문에 라이브러리 추가 -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjtools</artifactId>
		    <version>${org.aspectj-version}</version>
		</dependency>		
		
		
root-context.xml에서 namespace aop와 tx 추가 -> autoproxy 설정

	<!-- 자동으로 AspectJ라이브러리를 이용해서 Proxy객체를 생성해 내는 용도 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
-- AOP 기능을 설정할 때 사용

	<context:component-scan base-package="com.juyoung.aop"/>	


create table tbl_message(
	me_no number not null,	-- 메시지 번호
	me_sender varchar2(50) not null,	-- 보내는 사람 id
	me_receiver varchar2(50) not null, -- 받는 사람 id
	me_text varchar2(2000) not null, -- 내용
	me_senddate Date default sysdate not null, -- 보낸날짜
	me_readdate Date,
	me_isShow char(1) default 'Y' check(me_isShow in('Y', 'N')),
	constraint pk_meno primary key(me_no)	
);	


4 Spring의 트랜잭션 처리
Spring에서 트랜잭션을 처리하는 방식은 기본적으로 xml을 사용해서 선언하는 방식과
애노테이션을 활용하는 방식으로 나누어짐.
xml을 사용하는 경우에는 별도의 transaction-context.xml 파일을 이용해 xml로 작성해서 처리하는 경우가 많고,
애노테이션을 활용하는 경우에는 DAO나 Mapper등을 이용하는 xxxService 클래스에 에노테이션 처리를 통해서 해결

4.1.1 트랜잭션의 기본 원칙
ACID 속성
원자성(Atomicity)  하나의 트랜잭션은 모두 하나의 단위로 처리돼야 한다. 좀더 쉽게 말하자면 어떤 트랜잭션이 A와B로
구성된다면 항상 A,B의 처리결과는 동일한 결과여야 한다.
즉 A는 성공했지만, B는 실패할 경우 A,B는 원래 상태로 되돌려져야 한다. 어떤 작업이 잘못되는 경우
모든 작업은 원점으로 되돌려야 한다.

일관성(Consistency) 트랜잭션이 성공했다면 데이터베이스의 모든 데이터는 일관성을 유지해야한다. 트랜잭션으로 처리된
데이터와 일반 데이터 사이에는 전혀 차이가 없어야만 한다.

격리(lsolation) 트랜잭션으로 처리되는 중간에 외부에서의 간섭은 없어야만 한다.

영속성(Durability) 트랜잭션이 성공적으로 처리되면, 그결과는 영속적으로 보관되야 한다.

4.2 @Transactional 애노테이션
중요한 속성이 있으면, 경우에 따라서는 속성들을 조정해서 사용해야 한다.

순서
	1 pom.xml spring-tx 설치
	2 root-context 에서 스키마 tx 선언
	3 트랜잭션 메니저의 설정(root-context)
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:annotation-driven/>

하나의 DataSource를 사용하는 경우에는 스프링에서 제공하는 DataSourceTransactionManager를 이용하는데 
이때 필요한 DataSource를 주입받도록 한다.
코드의 마지막의 <tx: ~ >은 @Transactional 애노테이션을 이용한 트랜젹션의 관리가 가능하다.

			